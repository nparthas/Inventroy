# https://pythontips.com/2013/07/30/20-python-libraries-you-cant-live-without/
# MyClass(self, required=True, someNumber=<default>, *args, **kwargs)
# http://www.informit.com/articles/article.aspx?p=2314818
# https://docs.djangoproject.com/en/1.10/intro/tutorial04/
# https://devcenter.heroku.com/articles/deploying-python
# https://www.tutorialspoint.com/sqlite/sqlite_python.htm
# https://maryrosecook.com/blog/post/a-practical-introduction-to-functional-programming
# scheme
# https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf

# navigate to z-drive: cd\ then cd Z:
# django innit Z:\Inventory>C:\Users\neilp\AppData\Local\Programs\Python\Python36-32\Scripts\dj
# ango-admin.exe startproject mysite
# network access host through address 10.5.112.99:8000

import sqlite3 as sq
import time

# Dates in DD-MM-YYYY
# Create sample case inventory + rewrite maps

def createDB(dbfile):
    try:
        connection = sq.connect(dbfile)
        print("Opened database successfully")
        return connection

    except Exception as e:
        print("Unable to initialize.")


def createTableList(connection):
    connection.execute(''' CREATE TABLE TABLELIST
        (ID INT PRIMARY KEY,
        NAME TEXT NOT NULL
        DATEMODIFIED TEXT); ''')
    print('Table created successfully')

def createConnectorTable(connection):

    connection.execute(''' CREATE TABLE CONNECTORS
        ( ID INT PRIMARY KEY,
        NAME TEXT NOT NULL UNIQUE,
        CURRENTAMOUNT INT NOT NULL,
        SERIES TEXT,
        TYPE TEXT,
        PAIRNAME TEXT,
        BOXAMOUNT INT,
        CARTONAMOUNT INT,
        DATEORDERED TEXT,
        PRODUCTINFO TEXT,
        OFFICEAMOUNT INT,
        STOREAGEAMOUNT INT,
        SAMPLECASE TEXT);''') # sample case name goes in SAMPLECASE COL

    today = time.strftime('%d-%m-%y')
    connection.exectute('INSERT INTO TABLELIST (NAME, DATEMODIFIED) VALUES (CONNECTORS, ' + today + ' );')

    print('Table created successfully')

def createConnectorHistoryTable(connection):

    connection.execute(''' CREATE TABLE HISTORY
        (ID INT PRIMARY KEY,
        NAME TEXT NOT NULL,
        AMOUNT INT NOT NULL,
        DATE TEXT NOT NULL,
        DIFFERENCE INT,
        FOREIGN KEY(NAME) REFERENCES CONNECTORS(NAME)); ''')

    today = time.strftime('%d-%m-%y')
    connection.exectute('INSERT INTO TABLELIST (NAME, DATEMODIFIED) VALUES (HISTORY, ' + today + ' );')

    print("Table created successfully")

def createSampleCaseTable(connection, name):

    connection.execute(' CREATE TABLE SAMPLECASE-' + str(name.upper()) + '''
         (ID INT PRIMARY KEY,
        AMOUNT INT,
        DATE TEXT ); ''')

    today = time.strftime('%d-%m-%y')
    connection.exectute('INSERT INTO TABLELIST (NAME, DATEMODIFIED) VALUES ( ' + str(name.upper) + ', ' + today + ' );')

    print('Table created successfully')

def fillTable(dict, connection, tableName): # put conenctors for default tablename

    keys = [key.upper() for key in list(dict.keys())]

    keySTR = ", ".join(keys)
    keySTR = '(' + keySTR + ')'

    values = str(list(dict.values()))
    valuesSTR = values.replace("'", '"')
    valuesSTR = valuesSTR.replace('[', '(')
    valuesSTR = valuesSTR.replace(']', ')')

    # DIFFERENTITATES BETWEEN ' AND " IN EXECUTE STATEMENT

    if tableName.upper() == 'CONNECTORS':

        entries  = ( 'ID', 'NAME', 'SERIES', 'CURRENTAMOUNT', 'TYPE', 'PAIRNAME', 'BOXAMOUNT',
        'CARTONAMOUNT', 'DATEORDERED', 'PRODUCTINFO', 'OFFICEAMOUNT', 'STOREAGEAMOUNT')

        if set(keys).issubset(set(entries)):
            connection.execute('INSERT INTO CONNECTORS ' + keySTR + ' VALUES ' + valuesSTR)
            print('Records successfully added to connector table.')

        else:
            print("INVALID KEYS FOR UPDATE IN CONNECTOR TABLE")

    elif tableName.upper() == 'HISTORY':
        entries = ('NAME', 'AMOUNT', 'DATE', 'DIFFERENCE')

        if (set(entries) - set(keySTR) == set()) or (set(entries) - set(keySTR) == {'DIFFERENCE'}):
            if 'DIFFERENCE' not in keySTR:
                try:
                    connection.execute('SELECT AMOUNT '
                                       'FROM HISTORY '
                                       'WHERE NAME  = ' + str(dict['NAME']) +
                                       ' AND WHERE ID IN (SELECT ID FROM HISTORY WHERE TOP(ID)')
                    #VERIFY SUBQUERY SYNTAX
                except:
                    connection.execute('UPDATE HISTORY SET DIFFERENCE = 0 WHERE NAME = ' + dict['NAME'])
                    # TEST

            connection.exectute('INSERT INTO HISTORY ' + keySTR + 'VALUES ' + valuesSTR)
            print('Records successfully added to history table.')

        else:
            print('INVALID KEYS FOR UPDATE IN HISTORY TABLE')

    else:
        print('NOT A VALID TABLE')

    connection.commit()

#for test use:

db = createDB('inventory.db')
conndict = { 'ID' : 1 , 'NAME' : 'MUSBR', 'CURRENTAMOUNT' : 25}
hisdict = {'NAME' : 'MUSBR', 'AMOUNT' : 25}

